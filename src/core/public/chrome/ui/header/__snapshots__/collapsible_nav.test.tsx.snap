// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CollapsibleNav renders links grouped by category 1`] = `
<CollapsibleNav
  appId$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "test",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  basePath={
    BasePath {
      "basePath": "/test",
      "get": [Function],
      "getBasePath": [Function],
      "prepend": [Function],
      "prependWithoutWorkspacePath": [Function],
      "remove": [Function],
      "serverBasePath": "/test",
      "workspaceBasePath": "",
    }
  }
  branding={
    Object {
      "darkMode": false,
      "mark": Object {
        "darkModeUrl": "/darkModeLogo",
        "defaultUrl": "/defaultModeLogo",
      },
    }
  }
  closeNav={[Function]}
  currentWorkspace$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": null,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  customNavLink$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Object {
        "baseUrl": "/",
        "category": undefined,
        "data-test-subj": "Custom link",
        "href": "Custom link",
        "id": "Custom link",
        "isActive": true,
        "title": "Custom link",
      },
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  exitWorkspace={[Function]}
  getWorkspaceUrl={[Function]}
  homeHref="/"
  id="collapsibe-nav"
  isLocked={false}
  isNavOpen={true}
  navLinks$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "baseUrl": "/",
          "category": Object {
            "id": "library",
            "label": "Library",
            "order": 1000,
          },
          "data-test-subj": "discover",
          "href": "discover",
          "id": "discover",
          "isActive": true,
          "title": "discover",
        },
        Object {
          "baseUrl": "/",
          "category": Object {
            "euiIconType": "logoSecurity",
            "id": "securitySolution",
            "label": "Security",
            "order": 4000,
          },
          "data-test-subj": "siem",
          "href": "siem",
          "id": "siem",
          "isActive": true,
          "title": "siem",
        },
        Object {
          "baseUrl": "/",
          "category": Object {
            "euiIconType": "logoObservability",
            "id": "observability",
            "label": "Observability",
            "order": 3000,
          },
          "data-test-subj": "metrics",
          "href": "metrics",
          "id": "metrics",
          "isActive": true,
          "title": "metrics",
        },
        Object {
          "baseUrl": "/",
          "category": Object {
            "euiIconType": "managementApp",
            "id": "management",
            "label": "Management",
            "order": 5000,
          },
          "data-test-subj": "monitoring",
          "href": "monitoring",
          "id": "monitoring",
          "isActive": true,
          "title": "monitoring",
        },
        Object {
          "baseUrl": "/",
          "category": Object {
            "id": "library",
            "label": "Library",
            "order": 1000,
          },
          "data-test-subj": "visualize",
          "href": "visualize",
          "id": "visualize",
          "isActive": true,
          "title": "visualize",
        },
        Object {
          "baseUrl": "/",
          "category": Object {
            "id": "library",
            "label": "Library",
            "order": 1000,
          },
          "data-test-subj": "dashboard",
          "href": "dashboard",
          "id": "dashboard",
          "isActive": true,
          "title": "dashboard",
        },
        Object {
          "baseUrl": "/",
          "category": undefined,
          "data-test-subj": "canvas",
          "href": "canvas",
          "id": "canvas",
          "isActive": true,
          "title": "canvas",
        },
        Object {
          "baseUrl": "/",
          "category": Object {
            "euiIconType": "logoObservability",
            "id": "observability",
            "label": "Observability",
            "order": 3000,
          },
          "data-test-subj": "logs",
          "href": "logs",
          "id": "logs",
          "isActive": true,
          "title": "logs",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navigateToApp={[Function]}
  navigateToUrl={[Function]}
  onIsLockedUpdate={[Function]}
  recentlyAccessed$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "id": "recent 1",
          "label": "recent 1",
          "link": "recent 1",
        },
        Object {
          "id": "recent 2",
          "label": "recent 2",
          "link": "recent 2",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  storage={
    StubBrowserStorage {
      "keys": Array [],
      "size": 0,
      "sizeLimit": 5000000,
      "values": Array [],
    }
  }
  workspaceList$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
>
  <EuiCollapsibleNav
    aria-label="Primary"
    data-test-subj="collapsibleNav"
    id="collapsibe-nav"
    isDocked={false}
    isOpen={true}
    onClose={[Function]}
    outsideClickCloses={false}
  >
    <EuiFlyout
      aria-label="Primary"
      as="nav"
      className="euiCollapsibleNav"
      closeButtonPosition="outside"
      data-test-subj="collapsibleNav"
      hideCloseButton={false}
      id="collapsibe-nav"
      onClose={[Function]}
      outsideClickCloses={false}
      ownFocus={true}
      paddingSize="none"
      pushMinBreakpoint="l"
      role={null}
      side="left"
      size={320}
      type="overlay"
    >
      <nav
        data-eui="EuiFlyout"
        data-test-subj="collapsibleNav"
        role={null}
      >
        <button
          data-test-subj="euiFlyoutCloseButton"
          onClick={[Function]}
          type="button"
        />
        <EuiFlexItem
          className="eui-yScroll"
        >
          <div
            className="euiFlexItem eui-yScroll"
          >
            <EuiCollapsibleNavGroup
              iconType="logoOpenSearch"
              onClick={[Function]}
              title="Home"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="logoOpenSearch"
                          >
                            <span
                              data-euiicon-type="logoOpenSearch"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Home
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="bell"
              onClick={[Function]}
              title="Alerts"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="bell"
                          >
                            <span
                              data-euiicon-type="bell"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Alerts
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="starEmpty"
              initialIsOpen={true}
              isCollapsible={true}
              title="Favorites"
            >
              <EuiAccordion
                arrowDisplay="right"
                buttonClassName="euiCollapsibleNavGroup__heading"
                buttonContent={
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <EuiFlexItem
                      grow={false}
                    >
                      <EuiIcon
                        size="l"
                        type="starEmpty"
                      />
                    </EuiFlexItem>
                    <EuiFlexItem>
                      <EuiTitle
                        size="xxs"
                      >
                        <h3
                          className="euiCollapsibleNavGroup__title"
                          id="mockId__title"
                        >
                          Favorites
                        </h3>
                      </EuiTitle>
                    </EuiFlexItem>
                  </EuiFlexGroup>
                }
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                initialIsOpen={true}
                isLoading={false}
                isLoadingMessage={false}
                paddingSize="none"
              >
                <div
                  className="euiAccordion euiAccordion-isOpen euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                >
                  <div
                    className="euiAccordion__triggerWrapper"
                  >
                    <button
                      aria-controls="mockId"
                      aria-expanded={true}
                      className="euiAccordion__button euiAccordion__buttonReverse euiCollapsibleNavGroup__heading"
                      id="mockId"
                      onClick={[Function]}
                      type="button"
                    >
                      <span
                        className="euiAccordion__iconWrapper"
                      >
                        <EuiIcon
                          className="euiAccordion__icon euiAccordion__icon-isOpen"
                          size="m"
                          type="arrowRight"
                        >
                          <span
                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                            data-euiicon-type="arrowRight"
                            size="m"
                          />
                        </EuiIcon>
                      </span>
                      <span
                        className="euiIEFlexWrapFix"
                      >
                        <EuiFlexGroup
                          alignItems="center"
                          gutterSize="m"
                          responsive={false}
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero"
                              >
                                <EuiIcon
                                  size="l"
                                  type="starEmpty"
                                >
                                  <span
                                    data-euiicon-type="starEmpty"
                                    size="l"
                                  />
                                </EuiIcon>
                              </div>
                            </EuiFlexItem>
                            <EuiFlexItem>
                              <div
                                className="euiFlexItem"
                              >
                                <EuiTitle
                                  size="xxs"
                                >
                                  <h3
                                    className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                                    id="mockId__title"
                                  >
                                    Favorites
                                  </h3>
                                </EuiTitle>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </span>
                    </button>
                  </div>
                  <div
                    aria-labelledby="mockId"
                    className="euiAccordion__childWrapper"
                    id="mockId"
                    role="region"
                    tabIndex={-1}
                  >
                    <EuiResizeObserver
                      onResize={[Function]}
                    >
                      <div>
                        <div
                          className=""
                        >
                          <div
                            className="euiCollapsibleNavGroup__children"
                          >
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      No Favorites
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      SEE MORE
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                          </div>
                        </div>
                      </div>
                    </EuiResizeObserver>
                  </div>
                </div>
              </EuiAccordion>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="folderClosed"
              initialIsOpen={true}
              isCollapsible={true}
              title="Workspaces"
            >
              <EuiAccordion
                arrowDisplay="right"
                buttonClassName="euiCollapsibleNavGroup__heading"
                buttonContent={
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <EuiFlexItem
                      grow={false}
                    >
                      <EuiIcon
                        size="l"
                        type="folderClosed"
                      />
                    </EuiFlexItem>
                    <EuiFlexItem>
                      <EuiTitle
                        size="xxs"
                      >
                        <h3
                          className="euiCollapsibleNavGroup__title"
                          id="mockId__title"
                        >
                          Workspaces
                        </h3>
                      </EuiTitle>
                    </EuiFlexItem>
                  </EuiFlexGroup>
                }
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                initialIsOpen={true}
                isLoading={false}
                isLoadingMessage={false}
                paddingSize="none"
              >
                <div
                  className="euiAccordion euiAccordion-isOpen euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                >
                  <div
                    className="euiAccordion__triggerWrapper"
                  >
                    <button
                      aria-controls="mockId"
                      aria-expanded={true}
                      className="euiAccordion__button euiAccordion__buttonReverse euiCollapsibleNavGroup__heading"
                      id="mockId"
                      onClick={[Function]}
                      type="button"
                    >
                      <span
                        className="euiAccordion__iconWrapper"
                      >
                        <EuiIcon
                          className="euiAccordion__icon euiAccordion__icon-isOpen"
                          size="m"
                          type="arrowRight"
                        >
                          <span
                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                            data-euiicon-type="arrowRight"
                            size="m"
                          />
                        </EuiIcon>
                      </span>
                      <span
                        className="euiIEFlexWrapFix"
                      >
                        <EuiFlexGroup
                          alignItems="center"
                          gutterSize="m"
                          responsive={false}
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero"
                              >
                                <EuiIcon
                                  size="l"
                                  type="folderClosed"
                                >
                                  <span
                                    data-euiicon-type="folderClosed"
                                    size="l"
                                  />
                                </EuiIcon>
                              </div>
                            </EuiFlexItem>
                            <EuiFlexItem>
                              <div
                                className="euiFlexItem"
                              >
                                <EuiTitle
                                  size="xxs"
                                >
                                  <h3
                                    className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                                    id="mockId__title"
                                  >
                                    Workspaces
                                  </h3>
                                </EuiTitle>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </span>
                    </button>
                  </div>
                  <div
                    aria-labelledby="mockId"
                    className="euiAccordion__childWrapper"
                    id="mockId"
                    role="region"
                    tabIndex={-1}
                  >
                    <EuiResizeObserver
                      onResize={[Function]}
                    >
                      <div>
                        <div
                          className=""
                        >
                          <div
                            className="euiCollapsibleNavGroup__children"
                          >
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      No Workspaces
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                            <EuiText
                              color="subdued"
                              onClick={[Function]}
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      SEE MORE
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                          </div>
                        </div>
                      </div>
                    </EuiResizeObserver>
                  </div>
                </div>
              </EuiAccordion>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="managementApp"
              onClick={[Function]}
              title="Admin"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="managementApp"
                          >
                            <span
                              data-euiicon-type="managementApp"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Admin
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup>
              <div
                className="euiCollapsibleNavGroup"
                id="mockId"
              >
                <div
                  className="euiCollapsibleNavGroup__children"
                >
                  <EuiListGroup
                    flush={true}
                  >
                    <ul
                      className="euiListGroup euiListGroup-flush euiListGroup--gutterSmall euiListGroup-maxWidthDefault"
                    >
                      <EuiShowFor
                        sizes={
                          Array [
                            "l",
                            "xl",
                          ]
                        }
                      >
                        <EuiListGroupItem
                          aria-label="Dock primary navigation"
                          buttonRef={
                            Object {
                              "current": <button
                                aria-label="Dock primary navigation"
                                class="euiListGroupItem__button"
                                data-test-subj="collapsible-nav-lock"
                                type="button"
                              >
                                <span
                                  class="euiListGroupItem__icon"
                                  color="inherit"
                                  data-euiicon-type="lockOpen"
                                />
                                <span
                                  class="euiListGroupItem__label"
                                  title="Dock navigation"
                                >
                                  Dock navigation
                                </span>
                              </button>,
                            }
                          }
                          color="subdued"
                          data-test-subj="collapsible-nav-lock"
                          iconType="lockOpen"
                          label="Dock navigation"
                          onClick={[Function]}
                          size="xs"
                        >
                          <li
                            className="euiListGroupItem euiListGroupItem--xSmall euiListGroupItem--subdued euiListGroupItem-isClickable"
                          >
                            <button
                              aria-label="Dock primary navigation"
                              className="euiListGroupItem__button"
                              data-test-subj="collapsible-nav-lock"
                              disabled={false}
                              onClick={[Function]}
                              type="button"
                            >
                              <EuiIcon
                                className="euiListGroupItem__icon"
                                color="inherit"
                                type="lockOpen"
                              >
                                <span
                                  className="euiListGroupItem__icon"
                                  color="inherit"
                                  data-euiicon-type="lockOpen"
                                />
                              </EuiIcon>
                              <span
                                className="euiListGroupItem__label"
                                title="Dock navigation"
                              >
                                Dock navigation
                              </span>
                            </button>
                          </li>
                        </EuiListGroupItem>
                      </EuiShowFor>
                    </ul>
                  </EuiListGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
          </div>
        </EuiFlexItem>
      </nav>
    </EuiFlyout>
  </EuiCollapsibleNav>
</CollapsibleNav>
`;

exports[`CollapsibleNav renders the default nav 1`] = `
<CollapsibleNav
  appId$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "test",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  basePath={
    BasePath {
      "basePath": "/test",
      "get": [Function],
      "getBasePath": [Function],
      "prepend": [Function],
      "prependWithoutWorkspacePath": [Function],
      "remove": [Function],
      "serverBasePath": "/test",
      "workspaceBasePath": "",
    }
  }
  branding={
    Object {
      "darkMode": false,
      "mark": Object {
        "darkModeUrl": "/darkModeLogo",
        "defaultUrl": "/defaultModeLogo",
      },
    }
  }
  closeNav={[Function]}
  currentWorkspace$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": null,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  customNavLink$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  exitWorkspace={[Function]}
  getWorkspaceUrl={[Function]}
  homeHref="/"
  id="collapsibe-nav"
  isLocked={false}
  isNavOpen={false}
  navLinks$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navigateToApp={[Function]}
  navigateToUrl={[Function]}
  onIsLockedUpdate={[Function]}
  recentlyAccessed$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  storage={
    StubBrowserStorage {
      "keys": Array [],
      "size": 0,
      "sizeLimit": 5000000,
      "values": Array [],
    }
  }
  workspaceList$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
>
  <EuiCollapsibleNav
    aria-label="Primary"
    data-test-subj="collapsibleNav"
    id="collapsibe-nav"
    isDocked={false}
    isOpen={false}
    onClose={[Function]}
    outsideClickCloses={false}
  />
</CollapsibleNav>
`;

exports[`CollapsibleNav renders the default nav 2`] = `
<CollapsibleNav
  appId$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "test",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  basePath={
    BasePath {
      "basePath": "/test",
      "get": [Function],
      "getBasePath": [Function],
      "prepend": [Function],
      "prependWithoutWorkspacePath": [Function],
      "remove": [Function],
      "serverBasePath": "/test",
      "workspaceBasePath": "",
    }
  }
  branding={
    Object {
      "darkMode": false,
      "mark": Object {
        "darkModeUrl": "/darkModeLogo",
        "defaultUrl": "/defaultModeLogo",
      },
    }
  }
  closeNav={[Function]}
  currentWorkspace$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": null,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  customNavLink$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  exitWorkspace={[Function]}
  getWorkspaceUrl={[Function]}
  homeHref="/"
  id="collapsibe-nav"
  isLocked={false}
  isNavOpen={false}
  isOpen={true}
  navLinks$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navigateToApp={[Function]}
  navigateToUrl={[Function]}
  onIsLockedUpdate={[Function]}
  recentlyAccessed$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  storage={
    StubBrowserStorage {
      "keys": Array [],
      "size": 0,
      "sizeLimit": 5000000,
      "values": Array [],
    }
  }
  workspaceList$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
>
  <EuiCollapsibleNav
    aria-label="Primary"
    data-test-subj="collapsibleNav"
    id="collapsibe-nav"
    isDocked={false}
    isOpen={false}
    onClose={[Function]}
    outsideClickCloses={false}
  />
</CollapsibleNav>
`;

exports[`CollapsibleNav renders the default nav 3`] = `
<CollapsibleNav
  appId$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "test",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  basePath={
    BasePath {
      "basePath": "/test",
      "get": [Function],
      "getBasePath": [Function],
      "prepend": [Function],
      "prependWithoutWorkspacePath": [Function],
      "remove": [Function],
      "serverBasePath": "/test",
      "workspaceBasePath": "",
    }
  }
  branding={
    Object {
      "darkMode": false,
      "mark": Object {
        "darkModeUrl": "/darkModeLogo",
        "defaultUrl": "/defaultModeLogo",
      },
    }
  }
  closeNav={[Function]}
  currentWorkspace$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": null,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  customNavLink$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  exitWorkspace={[Function]}
  getWorkspaceUrl={[Function]}
  homeHref="/"
  id="collapsibe-nav"
  isLocked={true}
  isNavOpen={false}
  isOpen={true}
  navLinks$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navigateToApp={[Function]}
  navigateToUrl={[Function]}
  onIsLockedUpdate={[Function]}
  recentlyAccessed$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  storage={
    StubBrowserStorage {
      "keys": Array [],
      "size": 0,
      "sizeLimit": 5000000,
      "values": Array [],
    }
  }
  workspaceList$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
>
  <EuiCollapsibleNav
    aria-label="Primary"
    data-test-subj="collapsibleNav"
    id="collapsibe-nav"
    isDocked={true}
    isOpen={false}
    onClose={[Function]}
    outsideClickCloses={false}
  >
    <EuiFlyout
      aria-label="Primary"
      as="nav"
      className="euiCollapsibleNav"
      closeButtonPosition="outside"
      data-test-subj="collapsibleNav"
      hideCloseButton={true}
      id="collapsibe-nav"
      onClose={[Function]}
      outsideClickCloses={false}
      ownFocus={true}
      paddingSize="none"
      pushMinBreakpoint="l"
      role={null}
      side="left"
      size={320}
      type="push"
    >
      <nav
        data-eui="EuiFlyout"
        data-test-subj="collapsibleNav"
        role={null}
      >
        <EuiFlexItem
          className="eui-yScroll"
        >
          <div
            className="euiFlexItem eui-yScroll"
          >
            <EuiCollapsibleNavGroup
              iconType="logoOpenSearch"
              onClick={[Function]}
              title="Home"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="logoOpenSearch"
                          >
                            <span
                              data-euiicon-type="logoOpenSearch"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Home
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="bell"
              onClick={[Function]}
              title="Alerts"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="bell"
                          >
                            <span
                              data-euiicon-type="bell"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Alerts
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="starEmpty"
              initialIsOpen={true}
              isCollapsible={true}
              title="Favorites"
            >
              <EuiAccordion
                arrowDisplay="right"
                buttonClassName="euiCollapsibleNavGroup__heading"
                buttonContent={
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <EuiFlexItem
                      grow={false}
                    >
                      <EuiIcon
                        size="l"
                        type="starEmpty"
                      />
                    </EuiFlexItem>
                    <EuiFlexItem>
                      <EuiTitle
                        size="xxs"
                      >
                        <h3
                          className="euiCollapsibleNavGroup__title"
                          id="mockId__title"
                        >
                          Favorites
                        </h3>
                      </EuiTitle>
                    </EuiFlexItem>
                  </EuiFlexGroup>
                }
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                initialIsOpen={true}
                isLoading={false}
                isLoadingMessage={false}
                paddingSize="none"
              >
                <div
                  className="euiAccordion euiAccordion-isOpen euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                >
                  <div
                    className="euiAccordion__triggerWrapper"
                  >
                    <button
                      aria-controls="mockId"
                      aria-expanded={true}
                      className="euiAccordion__button euiAccordion__buttonReverse euiCollapsibleNavGroup__heading"
                      id="mockId"
                      onClick={[Function]}
                      type="button"
                    >
                      <span
                        className="euiAccordion__iconWrapper"
                      >
                        <EuiIcon
                          className="euiAccordion__icon euiAccordion__icon-isOpen"
                          size="m"
                          type="arrowRight"
                        >
                          <span
                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                            data-euiicon-type="arrowRight"
                            size="m"
                          />
                        </EuiIcon>
                      </span>
                      <span
                        className="euiIEFlexWrapFix"
                      >
                        <EuiFlexGroup
                          alignItems="center"
                          gutterSize="m"
                          responsive={false}
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero"
                              >
                                <EuiIcon
                                  size="l"
                                  type="starEmpty"
                                >
                                  <span
                                    data-euiicon-type="starEmpty"
                                    size="l"
                                  />
                                </EuiIcon>
                              </div>
                            </EuiFlexItem>
                            <EuiFlexItem>
                              <div
                                className="euiFlexItem"
                              >
                                <EuiTitle
                                  size="xxs"
                                >
                                  <h3
                                    className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                                    id="mockId__title"
                                  >
                                    Favorites
                                  </h3>
                                </EuiTitle>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </span>
                    </button>
                  </div>
                  <div
                    aria-labelledby="mockId"
                    className="euiAccordion__childWrapper"
                    id="mockId"
                    role="region"
                    tabIndex={-1}
                  >
                    <EuiResizeObserver
                      onResize={[Function]}
                    >
                      <div>
                        <div
                          className=""
                        >
                          <div
                            className="euiCollapsibleNavGroup__children"
                          >
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      No Favorites
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      SEE MORE
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                          </div>
                        </div>
                      </div>
                    </EuiResizeObserver>
                  </div>
                </div>
              </EuiAccordion>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="folderClosed"
              initialIsOpen={true}
              isCollapsible={true}
              title="Workspaces"
            >
              <EuiAccordion
                arrowDisplay="right"
                buttonClassName="euiCollapsibleNavGroup__heading"
                buttonContent={
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <EuiFlexItem
                      grow={false}
                    >
                      <EuiIcon
                        size="l"
                        type="folderClosed"
                      />
                    </EuiFlexItem>
                    <EuiFlexItem>
                      <EuiTitle
                        size="xxs"
                      >
                        <h3
                          className="euiCollapsibleNavGroup__title"
                          id="mockId__title"
                        >
                          Workspaces
                        </h3>
                      </EuiTitle>
                    </EuiFlexItem>
                  </EuiFlexGroup>
                }
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                initialIsOpen={true}
                isLoading={false}
                isLoadingMessage={false}
                paddingSize="none"
              >
                <div
                  className="euiAccordion euiAccordion-isOpen euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                >
                  <div
                    className="euiAccordion__triggerWrapper"
                  >
                    <button
                      aria-controls="mockId"
                      aria-expanded={true}
                      className="euiAccordion__button euiAccordion__buttonReverse euiCollapsibleNavGroup__heading"
                      id="mockId"
                      onClick={[Function]}
                      type="button"
                    >
                      <span
                        className="euiAccordion__iconWrapper"
                      >
                        <EuiIcon
                          className="euiAccordion__icon euiAccordion__icon-isOpen"
                          size="m"
                          type="arrowRight"
                        >
                          <span
                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                            data-euiicon-type="arrowRight"
                            size="m"
                          />
                        </EuiIcon>
                      </span>
                      <span
                        className="euiIEFlexWrapFix"
                      >
                        <EuiFlexGroup
                          alignItems="center"
                          gutterSize="m"
                          responsive={false}
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero"
                              >
                                <EuiIcon
                                  size="l"
                                  type="folderClosed"
                                >
                                  <span
                                    data-euiicon-type="folderClosed"
                                    size="l"
                                  />
                                </EuiIcon>
                              </div>
                            </EuiFlexItem>
                            <EuiFlexItem>
                              <div
                                className="euiFlexItem"
                              >
                                <EuiTitle
                                  size="xxs"
                                >
                                  <h3
                                    className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                                    id="mockId__title"
                                  >
                                    Workspaces
                                  </h3>
                                </EuiTitle>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </span>
                    </button>
                  </div>
                  <div
                    aria-labelledby="mockId"
                    className="euiAccordion__childWrapper"
                    id="mockId"
                    role="region"
                    tabIndex={-1}
                  >
                    <EuiResizeObserver
                      onResize={[Function]}
                    >
                      <div>
                        <div
                          className=""
                        >
                          <div
                            className="euiCollapsibleNavGroup__children"
                          >
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      No Workspaces
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                            <EuiText
                              color="subdued"
                              onClick={[Function]}
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      SEE MORE
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                          </div>
                        </div>
                      </div>
                    </EuiResizeObserver>
                  </div>
                </div>
              </EuiAccordion>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="managementApp"
              onClick={[Function]}
              title="Admin"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="managementApp"
                          >
                            <span
                              data-euiicon-type="managementApp"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Admin
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup>
              <div
                className="euiCollapsibleNavGroup"
                id="mockId"
              >
                <div
                  className="euiCollapsibleNavGroup__children"
                >
                  <EuiListGroup
                    flush={true}
                  >
                    <ul
                      className="euiListGroup euiListGroup-flush euiListGroup--gutterSmall euiListGroup-maxWidthDefault"
                    >
                      <EuiShowFor
                        sizes={
                          Array [
                            "l",
                            "xl",
                          ]
                        }
                      >
                        <EuiListGroupItem
                          aria-label="Undock primary navigation"
                          buttonRef={
                            Object {
                              "current": <button
                                aria-label="Undock primary navigation"
                                class="euiListGroupItem__button"
                                data-test-subj="collapsible-nav-lock"
                                type="button"
                              >
                                <span
                                  class="euiListGroupItem__icon"
                                  color="inherit"
                                  data-euiicon-type="lock"
                                />
                                <span
                                  class="euiListGroupItem__label"
                                  title="Undock navigation"
                                >
                                  Undock navigation
                                </span>
                              </button>,
                            }
                          }
                          color="subdued"
                          data-test-subj="collapsible-nav-lock"
                          iconType="lock"
                          label="Undock navigation"
                          onClick={[Function]}
                          size="xs"
                        >
                          <li
                            className="euiListGroupItem euiListGroupItem--xSmall euiListGroupItem--subdued euiListGroupItem-isClickable"
                          >
                            <button
                              aria-label="Undock primary navigation"
                              className="euiListGroupItem__button"
                              data-test-subj="collapsible-nav-lock"
                              disabled={false}
                              onClick={[Function]}
                              type="button"
                            >
                              <EuiIcon
                                className="euiListGroupItem__icon"
                                color="inherit"
                                type="lock"
                              >
                                <span
                                  className="euiListGroupItem__icon"
                                  color="inherit"
                                  data-euiicon-type="lock"
                                />
                              </EuiIcon>
                              <span
                                className="euiListGroupItem__label"
                                title="Undock navigation"
                              >
                                Undock navigation
                              </span>
                            </button>
                          </li>
                        </EuiListGroupItem>
                      </EuiShowFor>
                    </ul>
                  </EuiListGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
          </div>
        </EuiFlexItem>
      </nav>
    </EuiFlyout>
  </EuiCollapsibleNav>
</CollapsibleNav>
`;

exports[`CollapsibleNav renders the nav bar with custom logo in dark mode 1`] = `
<CollapsibleNav
  appId$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "test",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  basePath={
    BasePath {
      "basePath": "/test",
      "get": [Function],
      "getBasePath": [Function],
      "prepend": [Function],
      "prependWithoutWorkspacePath": [Function],
      "remove": [Function],
      "serverBasePath": "/test",
      "workspaceBasePath": "",
    }
  }
  branding={
    Object {
      "darkMode": true,
      "mark": Object {
        "darkModeUrl": "/darkModeLogo",
        "defaultUrl": "/defaultModeLogo",
      },
    }
  }
  closeNav={[Function]}
  currentWorkspace$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": null,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  customNavLink$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  exitWorkspace={[Function]}
  getWorkspaceUrl={[Function]}
  homeHref="/"
  id="collapsibe-nav"
  isLocked={false}
  isNavOpen={true}
  navLinks$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "baseUrl": "/",
          "category": Object {
            "id": "library",
            "label": "Library",
            "order": 1000,
          },
          "data-test-subj": "discover",
          "href": "discover",
          "id": "discover",
          "isActive": true,
          "title": "discover",
        },
        Object {
          "baseUrl": "/",
          "category": Object {
            "euiIconType": "logoObservability",
            "id": "observability",
            "label": "Observability",
            "order": 3000,
          },
          "data-test-subj": "discover",
          "href": "discover",
          "id": "discover",
          "isActive": true,
          "title": "discover",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navigateToApp={[Function]}
  navigateToUrl={[Function]}
  onIsLockedUpdate={[Function]}
  recentlyAccessed$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "id": "recent",
          "label": "recent",
          "link": "recent",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  storage={
    StubBrowserStorage {
      "keys": Array [],
      "size": 0,
      "sizeLimit": 5000000,
      "values": Array [],
    }
  }
  workspaceList$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
>
  <EuiCollapsibleNav
    aria-label="Primary"
    data-test-subj="collapsibleNav"
    id="collapsibe-nav"
    isDocked={false}
    isOpen={true}
    onClose={[Function]}
    outsideClickCloses={false}
  >
    <EuiFlyout
      aria-label="Primary"
      as="nav"
      className="euiCollapsibleNav"
      closeButtonPosition="outside"
      data-test-subj="collapsibleNav"
      hideCloseButton={false}
      id="collapsibe-nav"
      onClose={[Function]}
      outsideClickCloses={false}
      ownFocus={true}
      paddingSize="none"
      pushMinBreakpoint="l"
      role={null}
      side="left"
      size={320}
      type="overlay"
    >
      <nav
        data-eui="EuiFlyout"
        data-test-subj="collapsibleNav"
        role={null}
      >
        <button
          data-test-subj="euiFlyoutCloseButton"
          onClick={[Function]}
          type="button"
        />
        <EuiFlexItem
          className="eui-yScroll"
        >
          <div
            className="euiFlexItem eui-yScroll"
          >
            <EuiCollapsibleNavGroup
              iconType="logoOpenSearch"
              onClick={[Function]}
              title="Home"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="logoOpenSearch"
                          >
                            <span
                              data-euiicon-type="logoOpenSearch"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Home
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="bell"
              onClick={[Function]}
              title="Alerts"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="bell"
                          >
                            <span
                              data-euiicon-type="bell"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Alerts
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="starEmpty"
              initialIsOpen={true}
              isCollapsible={true}
              title="Favorites"
            >
              <EuiAccordion
                arrowDisplay="right"
                buttonClassName="euiCollapsibleNavGroup__heading"
                buttonContent={
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <EuiFlexItem
                      grow={false}
                    >
                      <EuiIcon
                        size="l"
                        type="starEmpty"
                      />
                    </EuiFlexItem>
                    <EuiFlexItem>
                      <EuiTitle
                        size="xxs"
                      >
                        <h3
                          className="euiCollapsibleNavGroup__title"
                          id="mockId__title"
                        >
                          Favorites
                        </h3>
                      </EuiTitle>
                    </EuiFlexItem>
                  </EuiFlexGroup>
                }
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                initialIsOpen={true}
                isLoading={false}
                isLoadingMessage={false}
                paddingSize="none"
              >
                <div
                  className="euiAccordion euiAccordion-isOpen euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                >
                  <div
                    className="euiAccordion__triggerWrapper"
                  >
                    <button
                      aria-controls="mockId"
                      aria-expanded={true}
                      className="euiAccordion__button euiAccordion__buttonReverse euiCollapsibleNavGroup__heading"
                      id="mockId"
                      onClick={[Function]}
                      type="button"
                    >
                      <span
                        className="euiAccordion__iconWrapper"
                      >
                        <EuiIcon
                          className="euiAccordion__icon euiAccordion__icon-isOpen"
                          size="m"
                          type="arrowRight"
                        >
                          <span
                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                            data-euiicon-type="arrowRight"
                            size="m"
                          />
                        </EuiIcon>
                      </span>
                      <span
                        className="euiIEFlexWrapFix"
                      >
                        <EuiFlexGroup
                          alignItems="center"
                          gutterSize="m"
                          responsive={false}
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero"
                              >
                                <EuiIcon
                                  size="l"
                                  type="starEmpty"
                                >
                                  <span
                                    data-euiicon-type="starEmpty"
                                    size="l"
                                  />
                                </EuiIcon>
                              </div>
                            </EuiFlexItem>
                            <EuiFlexItem>
                              <div
                                className="euiFlexItem"
                              >
                                <EuiTitle
                                  size="xxs"
                                >
                                  <h3
                                    className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                                    id="mockId__title"
                                  >
                                    Favorites
                                  </h3>
                                </EuiTitle>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </span>
                    </button>
                  </div>
                  <div
                    aria-labelledby="mockId"
                    className="euiAccordion__childWrapper"
                    id="mockId"
                    role="region"
                    tabIndex={-1}
                  >
                    <EuiResizeObserver
                      onResize={[Function]}
                    >
                      <div>
                        <div
                          className=""
                        >
                          <div
                            className="euiCollapsibleNavGroup__children"
                          >
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      No Favorites
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      SEE MORE
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                          </div>
                        </div>
                      </div>
                    </EuiResizeObserver>
                  </div>
                </div>
              </EuiAccordion>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="folderClosed"
              initialIsOpen={true}
              isCollapsible={true}
              title="Workspaces"
            >
              <EuiAccordion
                arrowDisplay="right"
                buttonClassName="euiCollapsibleNavGroup__heading"
                buttonContent={
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <EuiFlexItem
                      grow={false}
                    >
                      <EuiIcon
                        size="l"
                        type="folderClosed"
                      />
                    </EuiFlexItem>
                    <EuiFlexItem>
                      <EuiTitle
                        size="xxs"
                      >
                        <h3
                          className="euiCollapsibleNavGroup__title"
                          id="mockId__title"
                        >
                          Workspaces
                        </h3>
                      </EuiTitle>
                    </EuiFlexItem>
                  </EuiFlexGroup>
                }
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                initialIsOpen={true}
                isLoading={false}
                isLoadingMessage={false}
                paddingSize="none"
              >
                <div
                  className="euiAccordion euiAccordion-isOpen euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                >
                  <div
                    className="euiAccordion__triggerWrapper"
                  >
                    <button
                      aria-controls="mockId"
                      aria-expanded={true}
                      className="euiAccordion__button euiAccordion__buttonReverse euiCollapsibleNavGroup__heading"
                      id="mockId"
                      onClick={[Function]}
                      type="button"
                    >
                      <span
                        className="euiAccordion__iconWrapper"
                      >
                        <EuiIcon
                          className="euiAccordion__icon euiAccordion__icon-isOpen"
                          size="m"
                          type="arrowRight"
                        >
                          <span
                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                            data-euiicon-type="arrowRight"
                            size="m"
                          />
                        </EuiIcon>
                      </span>
                      <span
                        className="euiIEFlexWrapFix"
                      >
                        <EuiFlexGroup
                          alignItems="center"
                          gutterSize="m"
                          responsive={false}
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero"
                              >
                                <EuiIcon
                                  size="l"
                                  type="folderClosed"
                                >
                                  <span
                                    data-euiicon-type="folderClosed"
                                    size="l"
                                  />
                                </EuiIcon>
                              </div>
                            </EuiFlexItem>
                            <EuiFlexItem>
                              <div
                                className="euiFlexItem"
                              >
                                <EuiTitle
                                  size="xxs"
                                >
                                  <h3
                                    className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                                    id="mockId__title"
                                  >
                                    Workspaces
                                  </h3>
                                </EuiTitle>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </span>
                    </button>
                  </div>
                  <div
                    aria-labelledby="mockId"
                    className="euiAccordion__childWrapper"
                    id="mockId"
                    role="region"
                    tabIndex={-1}
                  >
                    <EuiResizeObserver
                      onResize={[Function]}
                    >
                      <div>
                        <div
                          className=""
                        >
                          <div
                            className="euiCollapsibleNavGroup__children"
                          >
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      No Workspaces
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                            <EuiText
                              color="subdued"
                              onClick={[Function]}
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      SEE MORE
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                          </div>
                        </div>
                      </div>
                    </EuiResizeObserver>
                  </div>
                </div>
              </EuiAccordion>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="managementApp"
              onClick={[Function]}
              title="Admin"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="managementApp"
                          >
                            <span
                              data-euiicon-type="managementApp"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Admin
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup>
              <div
                className="euiCollapsibleNavGroup"
                id="mockId"
              >
                <div
                  className="euiCollapsibleNavGroup__children"
                >
                  <EuiListGroup
                    flush={true}
                  >
                    <ul
                      className="euiListGroup euiListGroup-flush euiListGroup--gutterSmall euiListGroup-maxWidthDefault"
                    >
                      <EuiShowFor
                        sizes={
                          Array [
                            "l",
                            "xl",
                          ]
                        }
                      >
                        <EuiListGroupItem
                          aria-label="Dock primary navigation"
                          buttonRef={
                            Object {
                              "current": <button
                                aria-label="Dock primary navigation"
                                class="euiListGroupItem__button"
                                data-test-subj="collapsible-nav-lock"
                                type="button"
                              >
                                <span
                                  class="euiListGroupItem__icon"
                                  color="inherit"
                                  data-euiicon-type="lockOpen"
                                />
                                <span
                                  class="euiListGroupItem__label"
                                  title="Dock navigation"
                                >
                                  Dock navigation
                                </span>
                              </button>,
                            }
                          }
                          color="subdued"
                          data-test-subj="collapsible-nav-lock"
                          iconType="lockOpen"
                          label="Dock navigation"
                          onClick={[Function]}
                          size="xs"
                        >
                          <li
                            className="euiListGroupItem euiListGroupItem--xSmall euiListGroupItem--subdued euiListGroupItem-isClickable"
                          >
                            <button
                              aria-label="Dock primary navigation"
                              className="euiListGroupItem__button"
                              data-test-subj="collapsible-nav-lock"
                              disabled={false}
                              onClick={[Function]}
                              type="button"
                            >
                              <EuiIcon
                                className="euiListGroupItem__icon"
                                color="inherit"
                                type="lockOpen"
                              >
                                <span
                                  className="euiListGroupItem__icon"
                                  color="inherit"
                                  data-euiicon-type="lockOpen"
                                />
                              </EuiIcon>
                              <span
                                className="euiListGroupItem__label"
                                title="Dock navigation"
                              >
                                Dock navigation
                              </span>
                            </button>
                          </li>
                        </EuiListGroupItem>
                      </EuiShowFor>
                    </ul>
                  </EuiListGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
          </div>
        </EuiFlexItem>
      </nav>
    </EuiFlyout>
  </EuiCollapsibleNav>
</CollapsibleNav>
`;

exports[`CollapsibleNav renders the nav bar with custom logo in dark mode 2`] = `
<CollapsibleNav
  appId$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "test",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  basePath={
    BasePath {
      "basePath": "/test",
      "get": [Function],
      "getBasePath": [Function],
      "prepend": [Function],
      "prependWithoutWorkspacePath": [Function],
      "remove": [Function],
      "serverBasePath": "/test",
      "workspaceBasePath": "",
    }
  }
  branding={
    Object {
      "darkMode": true,
      "mark": Object {
        "defaultUrl": "/defaultModeLogo",
      },
    }
  }
  closeNav={[Function]}
  currentWorkspace$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": null,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  customNavLink$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  exitWorkspace={[Function]}
  getWorkspaceUrl={[Function]}
  homeHref="/"
  id="collapsibe-nav"
  isLocked={false}
  isNavOpen={true}
  navLinks$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "baseUrl": "/",
          "category": Object {
            "id": "library",
            "label": "Library",
            "order": 1000,
          },
          "data-test-subj": "discover",
          "href": "discover",
          "id": "discover",
          "isActive": true,
          "title": "discover",
        },
        Object {
          "baseUrl": "/",
          "category": Object {
            "euiIconType": "logoObservability",
            "id": "observability",
            "label": "Observability",
            "order": 3000,
          },
          "data-test-subj": "discover",
          "href": "discover",
          "id": "discover",
          "isActive": true,
          "title": "discover",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navigateToApp={[Function]}
  navigateToUrl={[Function]}
  onIsLockedUpdate={[Function]}
  recentlyAccessed$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "id": "recent",
          "label": "recent",
          "link": "recent",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  storage={
    StubBrowserStorage {
      "keys": Array [],
      "size": 0,
      "sizeLimit": 5000000,
      "values": Array [],
    }
  }
  workspaceList$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
>
  <EuiCollapsibleNav
    aria-label="Primary"
    data-test-subj="collapsibleNav"
    id="collapsibe-nav"
    isDocked={false}
    isOpen={true}
    onClose={[Function]}
    outsideClickCloses={false}
  >
    <EuiFlyout
      aria-label="Primary"
      as="nav"
      className="euiCollapsibleNav"
      closeButtonPosition="outside"
      data-test-subj="collapsibleNav"
      hideCloseButton={false}
      id="collapsibe-nav"
      onClose={[Function]}
      outsideClickCloses={false}
      ownFocus={true}
      paddingSize="none"
      pushMinBreakpoint="l"
      role={null}
      side="left"
      size={320}
      type="overlay"
    >
      <nav
        data-eui="EuiFlyout"
        data-test-subj="collapsibleNav"
        role={null}
      >
        <button
          data-test-subj="euiFlyoutCloseButton"
          onClick={[Function]}
          type="button"
        />
        <EuiFlexItem
          className="eui-yScroll"
        >
          <div
            className="euiFlexItem eui-yScroll"
          >
            <EuiCollapsibleNavGroup
              iconType="logoOpenSearch"
              onClick={[Function]}
              title="Home"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="logoOpenSearch"
                          >
                            <span
                              data-euiicon-type="logoOpenSearch"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Home
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="bell"
              onClick={[Function]}
              title="Alerts"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="bell"
                          >
                            <span
                              data-euiicon-type="bell"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Alerts
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="starEmpty"
              initialIsOpen={true}
              isCollapsible={true}
              title="Favorites"
            >
              <EuiAccordion
                arrowDisplay="right"
                buttonClassName="euiCollapsibleNavGroup__heading"
                buttonContent={
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <EuiFlexItem
                      grow={false}
                    >
                      <EuiIcon
                        size="l"
                        type="starEmpty"
                      />
                    </EuiFlexItem>
                    <EuiFlexItem>
                      <EuiTitle
                        size="xxs"
                      >
                        <h3
                          className="euiCollapsibleNavGroup__title"
                          id="mockId__title"
                        >
                          Favorites
                        </h3>
                      </EuiTitle>
                    </EuiFlexItem>
                  </EuiFlexGroup>
                }
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                initialIsOpen={true}
                isLoading={false}
                isLoadingMessage={false}
                paddingSize="none"
              >
                <div
                  className="euiAccordion euiAccordion-isOpen euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                >
                  <div
                    className="euiAccordion__triggerWrapper"
                  >
                    <button
                      aria-controls="mockId"
                      aria-expanded={true}
                      className="euiAccordion__button euiAccordion__buttonReverse euiCollapsibleNavGroup__heading"
                      id="mockId"
                      onClick={[Function]}
                      type="button"
                    >
                      <span
                        className="euiAccordion__iconWrapper"
                      >
                        <EuiIcon
                          className="euiAccordion__icon euiAccordion__icon-isOpen"
                          size="m"
                          type="arrowRight"
                        >
                          <span
                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                            data-euiicon-type="arrowRight"
                            size="m"
                          />
                        </EuiIcon>
                      </span>
                      <span
                        className="euiIEFlexWrapFix"
                      >
                        <EuiFlexGroup
                          alignItems="center"
                          gutterSize="m"
                          responsive={false}
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero"
                              >
                                <EuiIcon
                                  size="l"
                                  type="starEmpty"
                                >
                                  <span
                                    data-euiicon-type="starEmpty"
                                    size="l"
                                  />
                                </EuiIcon>
                              </div>
                            </EuiFlexItem>
                            <EuiFlexItem>
                              <div
                                className="euiFlexItem"
                              >
                                <EuiTitle
                                  size="xxs"
                                >
                                  <h3
                                    className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                                    id="mockId__title"
                                  >
                                    Favorites
                                  </h3>
                                </EuiTitle>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </span>
                    </button>
                  </div>
                  <div
                    aria-labelledby="mockId"
                    className="euiAccordion__childWrapper"
                    id="mockId"
                    role="region"
                    tabIndex={-1}
                  >
                    <EuiResizeObserver
                      onResize={[Function]}
                    >
                      <div>
                        <div
                          className=""
                        >
                          <div
                            className="euiCollapsibleNavGroup__children"
                          >
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      No Favorites
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      SEE MORE
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                          </div>
                        </div>
                      </div>
                    </EuiResizeObserver>
                  </div>
                </div>
              </EuiAccordion>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="folderClosed"
              initialIsOpen={true}
              isCollapsible={true}
              title="Workspaces"
            >
              <EuiAccordion
                arrowDisplay="right"
                buttonClassName="euiCollapsibleNavGroup__heading"
                buttonContent={
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <EuiFlexItem
                      grow={false}
                    >
                      <EuiIcon
                        size="l"
                        type="folderClosed"
                      />
                    </EuiFlexItem>
                    <EuiFlexItem>
                      <EuiTitle
                        size="xxs"
                      >
                        <h3
                          className="euiCollapsibleNavGroup__title"
                          id="mockId__title"
                        >
                          Workspaces
                        </h3>
                      </EuiTitle>
                    </EuiFlexItem>
                  </EuiFlexGroup>
                }
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                initialIsOpen={true}
                isLoading={false}
                isLoadingMessage={false}
                paddingSize="none"
              >
                <div
                  className="euiAccordion euiAccordion-isOpen euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                >
                  <div
                    className="euiAccordion__triggerWrapper"
                  >
                    <button
                      aria-controls="mockId"
                      aria-expanded={true}
                      className="euiAccordion__button euiAccordion__buttonReverse euiCollapsibleNavGroup__heading"
                      id="mockId"
                      onClick={[Function]}
                      type="button"
                    >
                      <span
                        className="euiAccordion__iconWrapper"
                      >
                        <EuiIcon
                          className="euiAccordion__icon euiAccordion__icon-isOpen"
                          size="m"
                          type="arrowRight"
                        >
                          <span
                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                            data-euiicon-type="arrowRight"
                            size="m"
                          />
                        </EuiIcon>
                      </span>
                      <span
                        className="euiIEFlexWrapFix"
                      >
                        <EuiFlexGroup
                          alignItems="center"
                          gutterSize="m"
                          responsive={false}
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero"
                              >
                                <EuiIcon
                                  size="l"
                                  type="folderClosed"
                                >
                                  <span
                                    data-euiicon-type="folderClosed"
                                    size="l"
                                  />
                                </EuiIcon>
                              </div>
                            </EuiFlexItem>
                            <EuiFlexItem>
                              <div
                                className="euiFlexItem"
                              >
                                <EuiTitle
                                  size="xxs"
                                >
                                  <h3
                                    className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                                    id="mockId__title"
                                  >
                                    Workspaces
                                  </h3>
                                </EuiTitle>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </span>
                    </button>
                  </div>
                  <div
                    aria-labelledby="mockId"
                    className="euiAccordion__childWrapper"
                    id="mockId"
                    role="region"
                    tabIndex={-1}
                  >
                    <EuiResizeObserver
                      onResize={[Function]}
                    >
                      <div>
                        <div
                          className=""
                        >
                          <div
                            className="euiCollapsibleNavGroup__children"
                          >
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      No Workspaces
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                            <EuiText
                              color="subdued"
                              onClick={[Function]}
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      SEE MORE
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                          </div>
                        </div>
                      </div>
                    </EuiResizeObserver>
                  </div>
                </div>
              </EuiAccordion>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="managementApp"
              onClick={[Function]}
              title="Admin"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="managementApp"
                          >
                            <span
                              data-euiicon-type="managementApp"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Admin
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup>
              <div
                className="euiCollapsibleNavGroup"
                id="mockId"
              >
                <div
                  className="euiCollapsibleNavGroup__children"
                >
                  <EuiListGroup
                    flush={true}
                  >
                    <ul
                      className="euiListGroup euiListGroup-flush euiListGroup--gutterSmall euiListGroup-maxWidthDefault"
                    >
                      <EuiShowFor
                        sizes={
                          Array [
                            "l",
                            "xl",
                          ]
                        }
                      >
                        <EuiListGroupItem
                          aria-label="Dock primary navigation"
                          buttonRef={
                            Object {
                              "current": <button
                                aria-label="Dock primary navigation"
                                class="euiListGroupItem__button"
                                data-test-subj="collapsible-nav-lock"
                                type="button"
                              >
                                <span
                                  class="euiListGroupItem__icon"
                                  color="inherit"
                                  data-euiicon-type="lockOpen"
                                />
                                <span
                                  class="euiListGroupItem__label"
                                  title="Dock navigation"
                                >
                                  Dock navigation
                                </span>
                              </button>,
                            }
                          }
                          color="subdued"
                          data-test-subj="collapsible-nav-lock"
                          iconType="lockOpen"
                          label="Dock navigation"
                          onClick={[Function]}
                          size="xs"
                        >
                          <li
                            className="euiListGroupItem euiListGroupItem--xSmall euiListGroupItem--subdued euiListGroupItem-isClickable"
                          >
                            <button
                              aria-label="Dock primary navigation"
                              className="euiListGroupItem__button"
                              data-test-subj="collapsible-nav-lock"
                              disabled={false}
                              onClick={[Function]}
                              type="button"
                            >
                              <EuiIcon
                                className="euiListGroupItem__icon"
                                color="inherit"
                                type="lockOpen"
                              >
                                <span
                                  className="euiListGroupItem__icon"
                                  color="inherit"
                                  data-euiicon-type="lockOpen"
                                />
                              </EuiIcon>
                              <span
                                className="euiListGroupItem__label"
                                title="Dock navigation"
                              >
                                Dock navigation
                              </span>
                            </button>
                          </li>
                        </EuiListGroupItem>
                      </EuiShowFor>
                    </ul>
                  </EuiListGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
          </div>
        </EuiFlexItem>
      </nav>
    </EuiFlyout>
  </EuiCollapsibleNav>
</CollapsibleNav>
`;

exports[`CollapsibleNav renders the nav bar with custom logo in dark mode 3`] = `
<CollapsibleNav
  appId$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "test",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  basePath={
    BasePath {
      "basePath": "/test",
      "get": [Function],
      "getBasePath": [Function],
      "prepend": [Function],
      "prependWithoutWorkspacePath": [Function],
      "remove": [Function],
      "serverBasePath": "/test",
      "workspaceBasePath": "",
    }
  }
  branding={
    Object {
      "darkMode": false,
      "mark": Object {},
    }
  }
  closeNav={[Function]}
  currentWorkspace$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": null,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  customNavLink$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  exitWorkspace={[Function]}
  getWorkspaceUrl={[Function]}
  homeHref="/"
  id="collapsibe-nav"
  isLocked={false}
  isNavOpen={true}
  navLinks$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "baseUrl": "/",
          "category": Object {
            "id": "library",
            "label": "Library",
            "order": 1000,
          },
          "data-test-subj": "discover",
          "href": "discover",
          "id": "discover",
          "isActive": true,
          "title": "discover",
        },
        Object {
          "baseUrl": "/",
          "category": Object {
            "euiIconType": "logoObservability",
            "id": "observability",
            "label": "Observability",
            "order": 3000,
          },
          "data-test-subj": "discover",
          "href": "discover",
          "id": "discover",
          "isActive": true,
          "title": "discover",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navigateToApp={[Function]}
  navigateToUrl={[Function]}
  onIsLockedUpdate={[Function]}
  recentlyAccessed$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "id": "recent",
          "label": "recent",
          "link": "recent",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  storage={
    StubBrowserStorage {
      "keys": Array [],
      "size": 0,
      "sizeLimit": 5000000,
      "values": Array [],
    }
  }
  workspaceList$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
>
  <EuiCollapsibleNav
    aria-label="Primary"
    data-test-subj="collapsibleNav"
    id="collapsibe-nav"
    isDocked={false}
    isOpen={true}
    onClose={[Function]}
    outsideClickCloses={false}
  >
    <EuiFlyout
      aria-label="Primary"
      as="nav"
      className="euiCollapsibleNav"
      closeButtonPosition="outside"
      data-test-subj="collapsibleNav"
      hideCloseButton={false}
      id="collapsibe-nav"
      onClose={[Function]}
      outsideClickCloses={false}
      ownFocus={true}
      paddingSize="none"
      pushMinBreakpoint="l"
      role={null}
      side="left"
      size={320}
      type="overlay"
    >
      <nav
        data-eui="EuiFlyout"
        data-test-subj="collapsibleNav"
        role={null}
      >
        <button
          data-test-subj="euiFlyoutCloseButton"
          onClick={[Function]}
          type="button"
        />
        <EuiFlexItem
          className="eui-yScroll"
        >
          <div
            className="euiFlexItem eui-yScroll"
          >
            <EuiCollapsibleNavGroup
              iconType="logoOpenSearch"
              onClick={[Function]}
              title="Home"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="logoOpenSearch"
                          >
                            <span
                              data-euiicon-type="logoOpenSearch"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Home
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="bell"
              onClick={[Function]}
              title="Alerts"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="bell"
                          >
                            <span
                              data-euiicon-type="bell"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Alerts
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="starEmpty"
              initialIsOpen={true}
              isCollapsible={true}
              title="Favorites"
            >
              <EuiAccordion
                arrowDisplay="right"
                buttonClassName="euiCollapsibleNavGroup__heading"
                buttonContent={
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <EuiFlexItem
                      grow={false}
                    >
                      <EuiIcon
                        size="l"
                        type="starEmpty"
                      />
                    </EuiFlexItem>
                    <EuiFlexItem>
                      <EuiTitle
                        size="xxs"
                      >
                        <h3
                          className="euiCollapsibleNavGroup__title"
                          id="mockId__title"
                        >
                          Favorites
                        </h3>
                      </EuiTitle>
                    </EuiFlexItem>
                  </EuiFlexGroup>
                }
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                initialIsOpen={true}
                isLoading={false}
                isLoadingMessage={false}
                paddingSize="none"
              >
                <div
                  className="euiAccordion euiAccordion-isOpen euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                >
                  <div
                    className="euiAccordion__triggerWrapper"
                  >
                    <button
                      aria-controls="mockId"
                      aria-expanded={true}
                      className="euiAccordion__button euiAccordion__buttonReverse euiCollapsibleNavGroup__heading"
                      id="mockId"
                      onClick={[Function]}
                      type="button"
                    >
                      <span
                        className="euiAccordion__iconWrapper"
                      >
                        <EuiIcon
                          className="euiAccordion__icon euiAccordion__icon-isOpen"
                          size="m"
                          type="arrowRight"
                        >
                          <span
                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                            data-euiicon-type="arrowRight"
                            size="m"
                          />
                        </EuiIcon>
                      </span>
                      <span
                        className="euiIEFlexWrapFix"
                      >
                        <EuiFlexGroup
                          alignItems="center"
                          gutterSize="m"
                          responsive={false}
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero"
                              >
                                <EuiIcon
                                  size="l"
                                  type="starEmpty"
                                >
                                  <span
                                    data-euiicon-type="starEmpty"
                                    size="l"
                                  />
                                </EuiIcon>
                              </div>
                            </EuiFlexItem>
                            <EuiFlexItem>
                              <div
                                className="euiFlexItem"
                              >
                                <EuiTitle
                                  size="xxs"
                                >
                                  <h3
                                    className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                                    id="mockId__title"
                                  >
                                    Favorites
                                  </h3>
                                </EuiTitle>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </span>
                    </button>
                  </div>
                  <div
                    aria-labelledby="mockId"
                    className="euiAccordion__childWrapper"
                    id="mockId"
                    role="region"
                    tabIndex={-1}
                  >
                    <EuiResizeObserver
                      onResize={[Function]}
                    >
                      <div>
                        <div
                          className=""
                        >
                          <div
                            className="euiCollapsibleNavGroup__children"
                          >
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      No Favorites
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      SEE MORE
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                          </div>
                        </div>
                      </div>
                    </EuiResizeObserver>
                  </div>
                </div>
              </EuiAccordion>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="folderClosed"
              initialIsOpen={true}
              isCollapsible={true}
              title="Workspaces"
            >
              <EuiAccordion
                arrowDisplay="right"
                buttonClassName="euiCollapsibleNavGroup__heading"
                buttonContent={
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <EuiFlexItem
                      grow={false}
                    >
                      <EuiIcon
                        size="l"
                        type="folderClosed"
                      />
                    </EuiFlexItem>
                    <EuiFlexItem>
                      <EuiTitle
                        size="xxs"
                      >
                        <h3
                          className="euiCollapsibleNavGroup__title"
                          id="mockId__title"
                        >
                          Workspaces
                        </h3>
                      </EuiTitle>
                    </EuiFlexItem>
                  </EuiFlexGroup>
                }
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                initialIsOpen={true}
                isLoading={false}
                isLoadingMessage={false}
                paddingSize="none"
              >
                <div
                  className="euiAccordion euiAccordion-isOpen euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                >
                  <div
                    className="euiAccordion__triggerWrapper"
                  >
                    <button
                      aria-controls="mockId"
                      aria-expanded={true}
                      className="euiAccordion__button euiAccordion__buttonReverse euiCollapsibleNavGroup__heading"
                      id="mockId"
                      onClick={[Function]}
                      type="button"
                    >
                      <span
                        className="euiAccordion__iconWrapper"
                      >
                        <EuiIcon
                          className="euiAccordion__icon euiAccordion__icon-isOpen"
                          size="m"
                          type="arrowRight"
                        >
                          <span
                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                            data-euiicon-type="arrowRight"
                            size="m"
                          />
                        </EuiIcon>
                      </span>
                      <span
                        className="euiIEFlexWrapFix"
                      >
                        <EuiFlexGroup
                          alignItems="center"
                          gutterSize="m"
                          responsive={false}
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero"
                              >
                                <EuiIcon
                                  size="l"
                                  type="folderClosed"
                                >
                                  <span
                                    data-euiicon-type="folderClosed"
                                    size="l"
                                  />
                                </EuiIcon>
                              </div>
                            </EuiFlexItem>
                            <EuiFlexItem>
                              <div
                                className="euiFlexItem"
                              >
                                <EuiTitle
                                  size="xxs"
                                >
                                  <h3
                                    className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                                    id="mockId__title"
                                  >
                                    Workspaces
                                  </h3>
                                </EuiTitle>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </span>
                    </button>
                  </div>
                  <div
                    aria-labelledby="mockId"
                    className="euiAccordion__childWrapper"
                    id="mockId"
                    role="region"
                    tabIndex={-1}
                  >
                    <EuiResizeObserver
                      onResize={[Function]}
                    >
                      <div>
                        <div
                          className=""
                        >
                          <div
                            className="euiCollapsibleNavGroup__children"
                          >
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      No Workspaces
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                            <EuiText
                              color="subdued"
                              onClick={[Function]}
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      SEE MORE
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                          </div>
                        </div>
                      </div>
                    </EuiResizeObserver>
                  </div>
                </div>
              </EuiAccordion>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="managementApp"
              onClick={[Function]}
              title="Admin"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="managementApp"
                          >
                            <span
                              data-euiicon-type="managementApp"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Admin
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup>
              <div
                className="euiCollapsibleNavGroup"
                id="mockId"
              >
                <div
                  className="euiCollapsibleNavGroup__children"
                >
                  <EuiListGroup
                    flush={true}
                  >
                    <ul
                      className="euiListGroup euiListGroup-flush euiListGroup--gutterSmall euiListGroup-maxWidthDefault"
                    >
                      <EuiShowFor
                        sizes={
                          Array [
                            "l",
                            "xl",
                          ]
                        }
                      >
                        <EuiListGroupItem
                          aria-label="Dock primary navigation"
                          buttonRef={
                            Object {
                              "current": <button
                                aria-label="Dock primary navigation"
                                class="euiListGroupItem__button"
                                data-test-subj="collapsible-nav-lock"
                                type="button"
                              >
                                <span
                                  class="euiListGroupItem__icon"
                                  color="inherit"
                                  data-euiicon-type="lockOpen"
                                />
                                <span
                                  class="euiListGroupItem__label"
                                  title="Dock navigation"
                                >
                                  Dock navigation
                                </span>
                              </button>,
                            }
                          }
                          color="subdued"
                          data-test-subj="collapsible-nav-lock"
                          iconType="lockOpen"
                          label="Dock navigation"
                          onClick={[Function]}
                          size="xs"
                        >
                          <li
                            className="euiListGroupItem euiListGroupItem--xSmall euiListGroupItem--subdued euiListGroupItem-isClickable"
                          >
                            <button
                              aria-label="Dock primary navigation"
                              className="euiListGroupItem__button"
                              data-test-subj="collapsible-nav-lock"
                              disabled={false}
                              onClick={[Function]}
                              type="button"
                            >
                              <EuiIcon
                                className="euiListGroupItem__icon"
                                color="inherit"
                                type="lockOpen"
                              >
                                <span
                                  className="euiListGroupItem__icon"
                                  color="inherit"
                                  data-euiicon-type="lockOpen"
                                />
                              </EuiIcon>
                              <span
                                className="euiListGroupItem__label"
                                title="Dock navigation"
                              >
                                Dock navigation
                              </span>
                            </button>
                          </li>
                        </EuiListGroupItem>
                      </EuiShowFor>
                    </ul>
                  </EuiListGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
          </div>
        </EuiFlexItem>
      </nav>
    </EuiFlyout>
  </EuiCollapsibleNav>
</CollapsibleNav>
`;

exports[`CollapsibleNav renders the nav bar with custom logo in default mode 1`] = `
<CollapsibleNav
  appId$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "test",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  basePath={
    BasePath {
      "basePath": "/test",
      "get": [Function],
      "getBasePath": [Function],
      "prepend": [Function],
      "prependWithoutWorkspacePath": [Function],
      "remove": [Function],
      "serverBasePath": "/test",
      "workspaceBasePath": "",
    }
  }
  branding={
    Object {
      "darkMode": false,
      "mark": Object {
        "darkModeUrl": "/darkModeLogo",
        "defaultUrl": "/defaultModeLogo",
      },
    }
  }
  closeNav={[Function]}
  currentWorkspace$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": null,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  customNavLink$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  exitWorkspace={[Function]}
  getWorkspaceUrl={[Function]}
  homeHref="/"
  id="collapsibe-nav"
  isLocked={false}
  isNavOpen={true}
  navLinks$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "baseUrl": "/",
          "category": Object {
            "id": "library",
            "label": "Library",
            "order": 1000,
          },
          "data-test-subj": "discover",
          "href": "discover",
          "id": "discover",
          "isActive": true,
          "title": "discover",
        },
        Object {
          "baseUrl": "/",
          "category": Object {
            "euiIconType": "logoObservability",
            "id": "observability",
            "label": "Observability",
            "order": 3000,
          },
          "data-test-subj": "discover",
          "href": "discover",
          "id": "discover",
          "isActive": true,
          "title": "discover",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navigateToApp={[Function]}
  navigateToUrl={[Function]}
  onIsLockedUpdate={[Function]}
  recentlyAccessed$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "id": "recent",
          "label": "recent",
          "link": "recent",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  storage={
    StubBrowserStorage {
      "keys": Array [],
      "size": 0,
      "sizeLimit": 5000000,
      "values": Array [],
    }
  }
  workspaceList$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
>
  <EuiCollapsibleNav
    aria-label="Primary"
    data-test-subj="collapsibleNav"
    id="collapsibe-nav"
    isDocked={false}
    isOpen={true}
    onClose={[Function]}
    outsideClickCloses={false}
  >
    <EuiFlyout
      aria-label="Primary"
      as="nav"
      className="euiCollapsibleNav"
      closeButtonPosition="outside"
      data-test-subj="collapsibleNav"
      hideCloseButton={false}
      id="collapsibe-nav"
      onClose={[Function]}
      outsideClickCloses={false}
      ownFocus={true}
      paddingSize="none"
      pushMinBreakpoint="l"
      role={null}
      side="left"
      size={320}
      type="overlay"
    >
      <nav
        data-eui="EuiFlyout"
        data-test-subj="collapsibleNav"
        role={null}
      >
        <button
          data-test-subj="euiFlyoutCloseButton"
          onClick={[Function]}
          type="button"
        />
        <EuiFlexItem
          className="eui-yScroll"
        >
          <div
            className="euiFlexItem eui-yScroll"
          >
            <EuiCollapsibleNavGroup
              iconType="logoOpenSearch"
              onClick={[Function]}
              title="Home"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="logoOpenSearch"
                          >
                            <span
                              data-euiicon-type="logoOpenSearch"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Home
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="bell"
              onClick={[Function]}
              title="Alerts"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="bell"
                          >
                            <span
                              data-euiicon-type="bell"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Alerts
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="starEmpty"
              initialIsOpen={true}
              isCollapsible={true}
              title="Favorites"
            >
              <EuiAccordion
                arrowDisplay="right"
                buttonClassName="euiCollapsibleNavGroup__heading"
                buttonContent={
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <EuiFlexItem
                      grow={false}
                    >
                      <EuiIcon
                        size="l"
                        type="starEmpty"
                      />
                    </EuiFlexItem>
                    <EuiFlexItem>
                      <EuiTitle
                        size="xxs"
                      >
                        <h3
                          className="euiCollapsibleNavGroup__title"
                          id="mockId__title"
                        >
                          Favorites
                        </h3>
                      </EuiTitle>
                    </EuiFlexItem>
                  </EuiFlexGroup>
                }
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                initialIsOpen={true}
                isLoading={false}
                isLoadingMessage={false}
                paddingSize="none"
              >
                <div
                  className="euiAccordion euiAccordion-isOpen euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                >
                  <div
                    className="euiAccordion__triggerWrapper"
                  >
                    <button
                      aria-controls="mockId"
                      aria-expanded={true}
                      className="euiAccordion__button euiAccordion__buttonReverse euiCollapsibleNavGroup__heading"
                      id="mockId"
                      onClick={[Function]}
                      type="button"
                    >
                      <span
                        className="euiAccordion__iconWrapper"
                      >
                        <EuiIcon
                          className="euiAccordion__icon euiAccordion__icon-isOpen"
                          size="m"
                          type="arrowRight"
                        >
                          <span
                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                            data-euiicon-type="arrowRight"
                            size="m"
                          />
                        </EuiIcon>
                      </span>
                      <span
                        className="euiIEFlexWrapFix"
                      >
                        <EuiFlexGroup
                          alignItems="center"
                          gutterSize="m"
                          responsive={false}
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero"
                              >
                                <EuiIcon
                                  size="l"
                                  type="starEmpty"
                                >
                                  <span
                                    data-euiicon-type="starEmpty"
                                    size="l"
                                  />
                                </EuiIcon>
                              </div>
                            </EuiFlexItem>
                            <EuiFlexItem>
                              <div
                                className="euiFlexItem"
                              >
                                <EuiTitle
                                  size="xxs"
                                >
                                  <h3
                                    className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                                    id="mockId__title"
                                  >
                                    Favorites
                                  </h3>
                                </EuiTitle>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </span>
                    </button>
                  </div>
                  <div
                    aria-labelledby="mockId"
                    className="euiAccordion__childWrapper"
                    id="mockId"
                    role="region"
                    tabIndex={-1}
                  >
                    <EuiResizeObserver
                      onResize={[Function]}
                    >
                      <div>
                        <div
                          className=""
                        >
                          <div
                            className="euiCollapsibleNavGroup__children"
                          >
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      No Favorites
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      SEE MORE
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                          </div>
                        </div>
                      </div>
                    </EuiResizeObserver>
                  </div>
                </div>
              </EuiAccordion>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="folderClosed"
              initialIsOpen={true}
              isCollapsible={true}
              title="Workspaces"
            >
              <EuiAccordion
                arrowDisplay="right"
                buttonClassName="euiCollapsibleNavGroup__heading"
                buttonContent={
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <EuiFlexItem
                      grow={false}
                    >
                      <EuiIcon
                        size="l"
                        type="folderClosed"
                      />
                    </EuiFlexItem>
                    <EuiFlexItem>
                      <EuiTitle
                        size="xxs"
                      >
                        <h3
                          className="euiCollapsibleNavGroup__title"
                          id="mockId__title"
                        >
                          Workspaces
                        </h3>
                      </EuiTitle>
                    </EuiFlexItem>
                  </EuiFlexGroup>
                }
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                initialIsOpen={true}
                isLoading={false}
                isLoadingMessage={false}
                paddingSize="none"
              >
                <div
                  className="euiAccordion euiAccordion-isOpen euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                >
                  <div
                    className="euiAccordion__triggerWrapper"
                  >
                    <button
                      aria-controls="mockId"
                      aria-expanded={true}
                      className="euiAccordion__button euiAccordion__buttonReverse euiCollapsibleNavGroup__heading"
                      id="mockId"
                      onClick={[Function]}
                      type="button"
                    >
                      <span
                        className="euiAccordion__iconWrapper"
                      >
                        <EuiIcon
                          className="euiAccordion__icon euiAccordion__icon-isOpen"
                          size="m"
                          type="arrowRight"
                        >
                          <span
                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                            data-euiicon-type="arrowRight"
                            size="m"
                          />
                        </EuiIcon>
                      </span>
                      <span
                        className="euiIEFlexWrapFix"
                      >
                        <EuiFlexGroup
                          alignItems="center"
                          gutterSize="m"
                          responsive={false}
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero"
                              >
                                <EuiIcon
                                  size="l"
                                  type="folderClosed"
                                >
                                  <span
                                    data-euiicon-type="folderClosed"
                                    size="l"
                                  />
                                </EuiIcon>
                              </div>
                            </EuiFlexItem>
                            <EuiFlexItem>
                              <div
                                className="euiFlexItem"
                              >
                                <EuiTitle
                                  size="xxs"
                                >
                                  <h3
                                    className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                                    id="mockId__title"
                                  >
                                    Workspaces
                                  </h3>
                                </EuiTitle>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </span>
                    </button>
                  </div>
                  <div
                    aria-labelledby="mockId"
                    className="euiAccordion__childWrapper"
                    id="mockId"
                    role="region"
                    tabIndex={-1}
                  >
                    <EuiResizeObserver
                      onResize={[Function]}
                    >
                      <div>
                        <div
                          className=""
                        >
                          <div
                            className="euiCollapsibleNavGroup__children"
                          >
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      No Workspaces
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                            <EuiText
                              color="subdued"
                              onClick={[Function]}
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      SEE MORE
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                          </div>
                        </div>
                      </div>
                    </EuiResizeObserver>
                  </div>
                </div>
              </EuiAccordion>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="managementApp"
              onClick={[Function]}
              title="Admin"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="managementApp"
                          >
                            <span
                              data-euiicon-type="managementApp"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Admin
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup>
              <div
                className="euiCollapsibleNavGroup"
                id="mockId"
              >
                <div
                  className="euiCollapsibleNavGroup__children"
                >
                  <EuiListGroup
                    flush={true}
                  >
                    <ul
                      className="euiListGroup euiListGroup-flush euiListGroup--gutterSmall euiListGroup-maxWidthDefault"
                    >
                      <EuiShowFor
                        sizes={
                          Array [
                            "l",
                            "xl",
                          ]
                        }
                      >
                        <EuiListGroupItem
                          aria-label="Dock primary navigation"
                          buttonRef={
                            Object {
                              "current": <button
                                aria-label="Dock primary navigation"
                                class="euiListGroupItem__button"
                                data-test-subj="collapsible-nav-lock"
                                type="button"
                              >
                                <span
                                  class="euiListGroupItem__icon"
                                  color="inherit"
                                  data-euiicon-type="lockOpen"
                                />
                                <span
                                  class="euiListGroupItem__label"
                                  title="Dock navigation"
                                >
                                  Dock navigation
                                </span>
                              </button>,
                            }
                          }
                          color="subdued"
                          data-test-subj="collapsible-nav-lock"
                          iconType="lockOpen"
                          label="Dock navigation"
                          onClick={[Function]}
                          size="xs"
                        >
                          <li
                            className="euiListGroupItem euiListGroupItem--xSmall euiListGroupItem--subdued euiListGroupItem-isClickable"
                          >
                            <button
                              aria-label="Dock primary navigation"
                              className="euiListGroupItem__button"
                              data-test-subj="collapsible-nav-lock"
                              disabled={false}
                              onClick={[Function]}
                              type="button"
                            >
                              <EuiIcon
                                className="euiListGroupItem__icon"
                                color="inherit"
                                type="lockOpen"
                              >
                                <span
                                  className="euiListGroupItem__icon"
                                  color="inherit"
                                  data-euiicon-type="lockOpen"
                                />
                              </EuiIcon>
                              <span
                                className="euiListGroupItem__label"
                                title="Dock navigation"
                              >
                                Dock navigation
                              </span>
                            </button>
                          </li>
                        </EuiListGroupItem>
                      </EuiShowFor>
                    </ul>
                  </EuiListGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
          </div>
        </EuiFlexItem>
      </nav>
    </EuiFlyout>
  </EuiCollapsibleNav>
</CollapsibleNav>
`;

exports[`CollapsibleNav renders the nav bar with custom logo in default mode 2`] = `
<CollapsibleNav
  appId$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "test",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  basePath={
    BasePath {
      "basePath": "/test",
      "get": [Function],
      "getBasePath": [Function],
      "prepend": [Function],
      "prependWithoutWorkspacePath": [Function],
      "remove": [Function],
      "serverBasePath": "/test",
      "workspaceBasePath": "",
    }
  }
  branding={
    Object {
      "darkMode": false,
      "mark": Object {},
    }
  }
  closeNav={[Function]}
  currentWorkspace$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": null,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  customNavLink$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  exitWorkspace={[Function]}
  getWorkspaceUrl={[Function]}
  homeHref="/"
  id="collapsibe-nav"
  isLocked={false}
  isNavOpen={true}
  navLinks$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "baseUrl": "/",
          "category": Object {
            "id": "library",
            "label": "Library",
            "order": 1000,
          },
          "data-test-subj": "discover",
          "href": "discover",
          "id": "discover",
          "isActive": true,
          "title": "discover",
        },
        Object {
          "baseUrl": "/",
          "category": Object {
            "euiIconType": "logoObservability",
            "id": "observability",
            "label": "Observability",
            "order": 3000,
          },
          "data-test-subj": "discover",
          "href": "discover",
          "id": "discover",
          "isActive": true,
          "title": "discover",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navigateToApp={[Function]}
  navigateToUrl={[Function]}
  onIsLockedUpdate={[Function]}
  recentlyAccessed$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "id": "recent",
          "label": "recent",
          "link": "recent",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  storage={
    StubBrowserStorage {
      "keys": Array [],
      "size": 0,
      "sizeLimit": 5000000,
      "values": Array [],
    }
  }
  workspaceList$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
>
  <EuiCollapsibleNav
    aria-label="Primary"
    data-test-subj="collapsibleNav"
    id="collapsibe-nav"
    isDocked={false}
    isOpen={true}
    onClose={[Function]}
    outsideClickCloses={false}
  >
    <EuiFlyout
      aria-label="Primary"
      as="nav"
      className="euiCollapsibleNav"
      closeButtonPosition="outside"
      data-test-subj="collapsibleNav"
      hideCloseButton={false}
      id="collapsibe-nav"
      onClose={[Function]}
      outsideClickCloses={false}
      ownFocus={true}
      paddingSize="none"
      pushMinBreakpoint="l"
      role={null}
      side="left"
      size={320}
      type="overlay"
    >
      <nav
        data-eui="EuiFlyout"
        data-test-subj="collapsibleNav"
        role={null}
      >
        <button
          data-test-subj="euiFlyoutCloseButton"
          onClick={[Function]}
          type="button"
        />
        <EuiFlexItem
          className="eui-yScroll"
        >
          <div
            className="euiFlexItem eui-yScroll"
          >
            <EuiCollapsibleNavGroup
              iconType="logoOpenSearch"
              onClick={[Function]}
              title="Home"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="logoOpenSearch"
                          >
                            <span
                              data-euiicon-type="logoOpenSearch"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Home
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="bell"
              onClick={[Function]}
              title="Alerts"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="bell"
                          >
                            <span
                              data-euiicon-type="bell"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Alerts
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="starEmpty"
              initialIsOpen={true}
              isCollapsible={true}
              title="Favorites"
            >
              <EuiAccordion
                arrowDisplay="right"
                buttonClassName="euiCollapsibleNavGroup__heading"
                buttonContent={
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <EuiFlexItem
                      grow={false}
                    >
                      <EuiIcon
                        size="l"
                        type="starEmpty"
                      />
                    </EuiFlexItem>
                    <EuiFlexItem>
                      <EuiTitle
                        size="xxs"
                      >
                        <h3
                          className="euiCollapsibleNavGroup__title"
                          id="mockId__title"
                        >
                          Favorites
                        </h3>
                      </EuiTitle>
                    </EuiFlexItem>
                  </EuiFlexGroup>
                }
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                initialIsOpen={true}
                isLoading={false}
                isLoadingMessage={false}
                paddingSize="none"
              >
                <div
                  className="euiAccordion euiAccordion-isOpen euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                >
                  <div
                    className="euiAccordion__triggerWrapper"
                  >
                    <button
                      aria-controls="mockId"
                      aria-expanded={true}
                      className="euiAccordion__button euiAccordion__buttonReverse euiCollapsibleNavGroup__heading"
                      id="mockId"
                      onClick={[Function]}
                      type="button"
                    >
                      <span
                        className="euiAccordion__iconWrapper"
                      >
                        <EuiIcon
                          className="euiAccordion__icon euiAccordion__icon-isOpen"
                          size="m"
                          type="arrowRight"
                        >
                          <span
                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                            data-euiicon-type="arrowRight"
                            size="m"
                          />
                        </EuiIcon>
                      </span>
                      <span
                        className="euiIEFlexWrapFix"
                      >
                        <EuiFlexGroup
                          alignItems="center"
                          gutterSize="m"
                          responsive={false}
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero"
                              >
                                <EuiIcon
                                  size="l"
                                  type="starEmpty"
                                >
                                  <span
                                    data-euiicon-type="starEmpty"
                                    size="l"
                                  />
                                </EuiIcon>
                              </div>
                            </EuiFlexItem>
                            <EuiFlexItem>
                              <div
                                className="euiFlexItem"
                              >
                                <EuiTitle
                                  size="xxs"
                                >
                                  <h3
                                    className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                                    id="mockId__title"
                                  >
                                    Favorites
                                  </h3>
                                </EuiTitle>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </span>
                    </button>
                  </div>
                  <div
                    aria-labelledby="mockId"
                    className="euiAccordion__childWrapper"
                    id="mockId"
                    role="region"
                    tabIndex={-1}
                  >
                    <EuiResizeObserver
                      onResize={[Function]}
                    >
                      <div>
                        <div
                          className=""
                        >
                          <div
                            className="euiCollapsibleNavGroup__children"
                          >
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      No Favorites
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      SEE MORE
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                          </div>
                        </div>
                      </div>
                    </EuiResizeObserver>
                  </div>
                </div>
              </EuiAccordion>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="folderClosed"
              initialIsOpen={true}
              isCollapsible={true}
              title="Workspaces"
            >
              <EuiAccordion
                arrowDisplay="right"
                buttonClassName="euiCollapsibleNavGroup__heading"
                buttonContent={
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <EuiFlexItem
                      grow={false}
                    >
                      <EuiIcon
                        size="l"
                        type="folderClosed"
                      />
                    </EuiFlexItem>
                    <EuiFlexItem>
                      <EuiTitle
                        size="xxs"
                      >
                        <h3
                          className="euiCollapsibleNavGroup__title"
                          id="mockId__title"
                        >
                          Workspaces
                        </h3>
                      </EuiTitle>
                    </EuiFlexItem>
                  </EuiFlexGroup>
                }
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                initialIsOpen={true}
                isLoading={false}
                isLoadingMessage={false}
                paddingSize="none"
              >
                <div
                  className="euiAccordion euiAccordion-isOpen euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                >
                  <div
                    className="euiAccordion__triggerWrapper"
                  >
                    <button
                      aria-controls="mockId"
                      aria-expanded={true}
                      className="euiAccordion__button euiAccordion__buttonReverse euiCollapsibleNavGroup__heading"
                      id="mockId"
                      onClick={[Function]}
                      type="button"
                    >
                      <span
                        className="euiAccordion__iconWrapper"
                      >
                        <EuiIcon
                          className="euiAccordion__icon euiAccordion__icon-isOpen"
                          size="m"
                          type="arrowRight"
                        >
                          <span
                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                            data-euiicon-type="arrowRight"
                            size="m"
                          />
                        </EuiIcon>
                      </span>
                      <span
                        className="euiIEFlexWrapFix"
                      >
                        <EuiFlexGroup
                          alignItems="center"
                          gutterSize="m"
                          responsive={false}
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                          >
                            <EuiFlexItem
                              grow={false}
                            >
                              <div
                                className="euiFlexItem euiFlexItem--flexGrowZero"
                              >
                                <EuiIcon
                                  size="l"
                                  type="folderClosed"
                                >
                                  <span
                                    data-euiicon-type="folderClosed"
                                    size="l"
                                  />
                                </EuiIcon>
                              </div>
                            </EuiFlexItem>
                            <EuiFlexItem>
                              <div
                                className="euiFlexItem"
                              >
                                <EuiTitle
                                  size="xxs"
                                >
                                  <h3
                                    className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                                    id="mockId__title"
                                  >
                                    Workspaces
                                  </h3>
                                </EuiTitle>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </span>
                    </button>
                  </div>
                  <div
                    aria-labelledby="mockId"
                    className="euiAccordion__childWrapper"
                    id="mockId"
                    role="region"
                    tabIndex={-1}
                  >
                    <EuiResizeObserver
                      onResize={[Function]}
                    >
                      <div>
                        <div
                          className=""
                        >
                          <div
                            className="euiCollapsibleNavGroup__children"
                          >
                            <EuiText
                              color="subdued"
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      No Workspaces
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                            <EuiText
                              color="subdued"
                              onClick={[Function]}
                              size="s"
                              style={
                                Object {
                                  "padding": "0 8px 8px",
                                }
                              }
                            >
                              <div
                                className="euiText euiText--small"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "padding": "0 8px 8px",
                                  }
                                }
                              >
                                <EuiTextColor
                                  color="subdued"
                                  component="div"
                                >
                                  <div
                                    className="euiTextColor euiTextColor--subdued"
                                  >
                                    <p>
                                      SEE MORE
                                    </p>
                                  </div>
                                </EuiTextColor>
                              </div>
                            </EuiText>
                          </div>
                        </div>
                      </div>
                    </EuiResizeObserver>
                  </div>
                </div>
              </EuiAccordion>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup
              iconType="managementApp"
              onClick={[Function]}
              title="Admin"
            >
              <div
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--withHeading"
                id="mockId"
                onClick={[Function]}
              >
                <div
                  className="euiCollapsibleNavGroup__heading"
                >
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <div
                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                    >
                      <EuiFlexItem
                        grow={false}
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                        >
                          <EuiIcon
                            size="l"
                            type="managementApp"
                          >
                            <span
                              data-euiicon-type="managementApp"
                              size="l"
                            />
                          </EuiIcon>
                        </div>
                      </EuiFlexItem>
                      <EuiFlexItem>
                        <div
                          className="euiFlexItem"
                        >
                          <EuiTitle
                            size="xxs"
                          >
                            <h3
                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                              id="mockId__title"
                            >
                              Admin
                            </h3>
                          </EuiTitle>
                        </div>
                      </EuiFlexItem>
                    </div>
                  </EuiFlexGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
            <EuiCollapsibleNavGroup>
              <div
                className="euiCollapsibleNavGroup"
                id="mockId"
              >
                <div
                  className="euiCollapsibleNavGroup__children"
                >
                  <EuiListGroup
                    flush={true}
                  >
                    <ul
                      className="euiListGroup euiListGroup-flush euiListGroup--gutterSmall euiListGroup-maxWidthDefault"
                    >
                      <EuiShowFor
                        sizes={
                          Array [
                            "l",
                            "xl",
                          ]
                        }
                      >
                        <EuiListGroupItem
                          aria-label="Dock primary navigation"
                          buttonRef={
                            Object {
                              "current": <button
                                aria-label="Dock primary navigation"
                                class="euiListGroupItem__button"
                                data-test-subj="collapsible-nav-lock"
                                type="button"
                              >
                                <span
                                  class="euiListGroupItem__icon"
                                  color="inherit"
                                  data-euiicon-type="lockOpen"
                                />
                                <span
                                  class="euiListGroupItem__label"
                                  title="Dock navigation"
                                >
                                  Dock navigation
                                </span>
                              </button>,
                            }
                          }
                          color="subdued"
                          data-test-subj="collapsible-nav-lock"
                          iconType="lockOpen"
                          label="Dock navigation"
                          onClick={[Function]}
                          size="xs"
                        >
                          <li
                            className="euiListGroupItem euiListGroupItem--xSmall euiListGroupItem--subdued euiListGroupItem-isClickable"
                          >
                            <button
                              aria-label="Dock primary navigation"
                              className="euiListGroupItem__button"
                              data-test-subj="collapsible-nav-lock"
                              disabled={false}
                              onClick={[Function]}
                              type="button"
                            >
                              <EuiIcon
                                className="euiListGroupItem__icon"
                                color="inherit"
                                type="lockOpen"
                              >
                                <span
                                  className="euiListGroupItem__icon"
                                  color="inherit"
                                  data-euiicon-type="lockOpen"
                                />
                              </EuiIcon>
                              <span
                                className="euiListGroupItem__label"
                                title="Dock navigation"
                              >
                                Dock navigation
                              </span>
                            </button>
                          </li>
                        </EuiListGroupItem>
                      </EuiShowFor>
                    </ul>
                  </EuiListGroup>
                </div>
              </div>
            </EuiCollapsibleNavGroup>
          </div>
        </EuiFlexItem>
      </nav>
    </EuiFlyout>
  </EuiCollapsibleNav>
</CollapsibleNav>
`;
